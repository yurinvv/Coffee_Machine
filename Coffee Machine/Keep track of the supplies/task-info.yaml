type: edu
files:
- name: src/machine/Main.kt
  visible: true
  text: |
    package machine

    fun main() {
        println("Hello, world!")
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeCup.kt
  visible: true
  text: |-
    package machine

    class CoffeeCup (
        var mlOfWater: Int = 200,
        var mlOfMilk: Int = 50,
        var gOfBeans: Int = 15,
        var price: Int = 6
    )
  learner_created: true
- name: src/machine/CoffeeMachine.kt
  visible: true
  text: "package machine\n\nimport kotlin.math.min\n\nclass CoffeeMachine {\n    var\
    \ mlOfWater = 400\n    var mlOfMilk = 540\n    var gOfBeans = 120\n    var money\
    \ = 550\n    var disposableCups = 9\n\n    fun cupsAmount(cup: CoffeeCup): Int\
    \ {\n        val milkSupply = if (cup.mlOfMilk > 0) mlOfMilk / cup.mlOfMilk else\
    \ mlOfMilk\n        val waterSupply = if (cup.mlOfWater > 0) mlOfWater / cup.mlOfWater\
    \ else mlOfWater\n        val beanSupply = if (cup.gOfBeans > 0) gOfBeans / cup.gOfBeans\
    \ else gOfBeans\n        return min(disposableCups, min(beanSupply, min(milkSupply,\
    \ waterSupply)))\n    }\n\n    fun makeCoffee(cup: CoffeeCup) {\n        if (cupsAmount(cup)\
    \ > 0) {\n            this.mlOfMilk -= cup.mlOfMilk\n            this.gOfBeans\
    \ -= cup.gOfBeans\n            this.mlOfWater -= cup.mlOfWater\n            this.money\
    \ += cup.price\n            this.disposableCups--\n        }\n    }\n\n    fun\
    \ printSupplies() {\n        println(\"\"\"\n            The coffee machine has:\n\
    \            $mlOfWater ml of water\n            $mlOfMilk ml of milk\n      \
    \      $gOfBeans g of coffee beans\n            $disposableCups disposable cups\n\
    \            $$money of money\n            \n        \"\"\".trimIndent())\n  \
    \  }\n}"
  learner_created: true
- name: src/machine/Controller.kt
  visible: true
  text: |-
    package machine

    class Controller (
        val coffeeMachine: CoffeeMachine,
        val espresso: CoffeeCup,
        val latte: CoffeeCup,
        val cappuccino: CoffeeCup
    ) {

        fun action() {
            coffeeMachine.printSupplies()
            println("Write action (buy, fill, take):")
            when (readln()) {
                "buy" -> buy()
                "fill" -> fill()
                "take" -> take()
                else -> println("Unknown action")
            }
            coffeeMachine.printSupplies()
        }

        private fun fill() {
            println("Write how many ml of water you want to add:")
            coffeeMachine.mlOfWater += readln().toInt()
            println("Write how many ml of milk you want to add:")
            coffeeMachine.mlOfMilk += readln().toInt()
            println("Write how many grams of coffee beans you want to add:")
            coffeeMachine.gOfBeans += readln().toInt()
            println("Write how many disposable cups you want to add:")
            coffeeMachine.disposableCups += readln().toInt()
        }

        private fun buy() {
            println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: ")
            when (readln().toInt()) {
                1 -> coffeeMachine.makeCoffee(espresso)
                2 -> coffeeMachine.makeCoffee(latte)
                3 -> coffeeMachine.makeCoffee(cappuccino)
                else -> "Unknown type of coffee"
            }
        }

        private fun take() {
            coffeeMachine.money = 0
        }
    }
  learner_created: true
- name: src/machine/Action.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5663#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 02 Dec 2022 21:47:08 UTC"
record: 5
